var documenterSearchIndex = {"docs":
[{"location":"man/species/#Species","page":"Species","title":"Species","text":"","category":"section"},{"location":"man/species/","page":"Species","title":"Species","text":"Species is a composite type (introduced by the keyword struct) and is defined by a name, a symbol, a formula, an aggregate state, a class and properties. It creates chemical species for solution or solid phases:","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"struct Species{T<:Number} <: AbstractSpecies\n    name::String\n    symbol::String\n    formula::Formula{T}\n    aggregate_state::AggregateState\n    class::Class\n    properties::OrderedDict{Symbol,PropertyType}\nend","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"info: Advanced description\naggregate_state denotes the state of the species (solid, liquid, gas) for which the possible keywords are ASAQUEOUS, ASCRYSTAL, ASGAS and ASUNDEF\nclass defines the role played by the species in the solution. The possible keywords are SCAQSOLVENT, SCAQSOLUTE, SCCOMPONENT, SCGASFLUID and SCUNDEF\nproperties refers to the set of properties intrinsic to the species. These properties are detailed below (Species properties). ","category":"page"},{"location":"man/species/#Species-construction","page":"Species","title":"Species construction","text":"","category":"section"},{"location":"man/species/","page":"Species","title":"Species","text":"Species can be created from:","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"a Formula","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"using ChemistryLab #hide\nfH2O = 2 * :H + :O\nH2O = Species(fH2O)","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"a string","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"using ChemistryLab #hide\nHSO4⁻ = Species(\"HSO₄⁻\")","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"a dictionary","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"using ChemistryLab #hide\nCO2 = Species(Dict(:C => 1, :O => 2))","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"note: Adding charge\nTo add a charge when creating species with a dictionary, you must add, after the dictionary, the value of the charge (charge is considered an argument of the composite type).","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"using ChemistryLab #hide\nCO2 = Species(Dict(:Si => 1, :O => 3),-2)","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"Keyword arguments such as name, symbol, aggregate_state, class can be added during construction.","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"using ChemistryLab #hide\nfH₂O = 2*:H + :O\nH₂O = Species(fH₂O; name=\"Water\", symbol=\"H₂O@\", aggregate_state=AS_AQUEOUS, class=SC_AQSOLVENT)","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"And symbol accept unicode characters.","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"using ChemistryLab #hide\nCO₂ = Species(Dict(:C=>1, :O=>2); name=\"Carbon dioxide\", symbol=\"CO₂⤴\", aggregate_state=AS_GAS, class=SC_GAS_FLUID)","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"note: Comparison between species\nComparison between species are done by comparing atoms, aggregatestate and class. In the example below, vapour is not equal to H₂O since *aggregatestate* and class are different despite atoms are identical.vapour = Species(2*:H + :O; name=\"Vapour\", symbol=\"H₂O⤴\", aggregate_state=AS_GAS, class=SC_GAS_FLUID)\nvapour == H₂O","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"tip: Remark\nYou will also have noticed that a calculation of the molar mass of the species is systematically carried out.","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"","category":"page"},{"location":"man/species/#Cement-Species","page":"Species","title":"Cement Species","text":"","category":"section"},{"location":"man/species/","page":"Species","title":"Species","text":"The manipulation of chemical formulas can also be done in cement notation. Here are examples of anhydrous phases:","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"C3S = CemSpecies(\"C3S\")\nC2S = CemSpecies(\"C2S\")\nC3A = CemSpecies(\"C3A\")\nC4AF = CemSpecies(Dict(:C => 4, :A => 1, :F => 1); name = \"C4AF\")","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"warning: Warning\nNot every molecule can be used to build a cement species. It is necessary for this molecule to decompose into a combination of the oxides present in the manufacturers' cement sheet (e.g. CaO, SiO_2, Fe_2O_3, Al_2O_3) and water. Thus, the following code will return an error.CemSpecies(Species(\"Ca(OH)\"))","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"","category":"page"},{"location":"man/species/#Numeric-and-Symbolic-CemSpecies","page":"Species","title":"Numeric and Symbolic CemSpecies","text":"","category":"section"},{"location":"man/species/","page":"Species","title":"Species","text":"The previous species were constructed from integer values ​​of the number of chemical elements. However, other numerical value types ​​are possible (see species), such as fraction or Real values.","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"using ChemistryLab\nox = Dict(:C => 1.666667, :S => 1, :H => 2.1)\njennite = CemSpecies(ox)","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"Symbolic values are also allowed. In this case, you need to use the SymPy library:","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"using ChemistryLab\nusing SymPy\nâ, ĝ = symbols(\"â ĝ\", real = true)\nox = Dict(:C => â, :S => one(Sym), :H => ĝ)\nCSH = CemSpecies(ox)","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"The value of variables can be defined a posteriori.","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"jennite = CemSpecies(map(N, map(subs, cemformula(CSH), â => 1.666667, ĝ => 2.1)))","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"note: Remark\nConversion of coefficient types can also be done.floatCSH = Species(convert(Float64, formula(numCSH)))","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"","category":"page"},{"location":"man/species/#Conversion-to-Cement-Notation","page":"Species","title":"Conversion to Cement Notation","text":"","category":"section"},{"location":"man/species/","page":"Species","title":"Species","text":"Convert species to cement notation and Unicode. Conversion can be done on simple species:","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"H2O = Species(\"H₂O\")\ncemH2O = CemSpecies(H2O)","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"Or more complex one:","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"using ChemistryLab #hide\nCSH = Species(\"(SiO2)1(CaO)1.666667(H2O)2.1\")\njennite = CemSpecies(CSH)","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"","category":"page"},{"location":"man/species/#Species-properties","page":"Species","title":"Species properties","text":"","category":"section"},{"location":"man/species/","page":"Species","title":"Species","text":"Species properties are open and left to the discretion of users. Only the molar mass is systematically calculated and integrated into the species properties, for now. We can of course imagine that these properties could contain thermodynamic properties such as the Gibbs energy of formation, the heat capacity or even the entropy variation, these properties themselves being temperature dependent. These properties must nevertheless respect one of the following types: Number, AbstractVector{<:Number}, Function, AbstractString.","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"Imagine, for example, that we wanted to construct the jennite (C_167SH_21) molecule with some of its thermodynamic properties. The Gibbs energy of formation of this species is equal to -2480.81 KJ/mol. This property, intrinsic to the species, can be added simply as follows:","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"import Unitful: @u_str, K, J, mol, Quantity, uconvert, ustrip, unit, uparse\njennite.ΔfG⁰ = -2480.81*u\"kJ/mol\"","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"function Cₚ(T, a)\n    y= a[1] + a[2] * T + a[3] * T^(-2) + a[4] * T^(−0.5)\n    return y\nend\njennite.Cₚ = T -> Cₚ(T, [210.0*u\"J/K/mol\", 0.120*u\"J/mol/K^2\", -3.07e6*u\"J*K/mol\", 0.0*u\"J/mol/K^(0.5)\"]) #Todo unitful\njennite.Cₚ(273*u\"K\")","category":"page"},{"location":"man/equations/#Chemical-reactions","page":"Chemical reactions","title":"Chemical reactions","text":"","category":"section"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"In CementChermistry it is possible to build chemical reactions and manipulate them. A reaction is constructed as a structure, \"a composite data type that allows you to store multiple values in a single object\". The struct is organized as follows:","category":"page"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"struct Reaction{SR<:AbstractSpecies, TR<:Number, SP<:AbstractSpecies, TP<:Number}\n    equation::String\n    colored::String\n    reactants::OrderedDict{SR, TR}\n    products::OrderedDict{SP, TP}\n    equal_sign::Char\n    properties::OrderedDict{Symbol,PropertyType}\nend","category":"page"},{"location":"man/equations/#Parsing-reactions","page":"Chemical reactions","title":"Parsing reactions","text":"","category":"section"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"Reaction is a composite type struct which can be build from:","category":"page"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"a string containing species","category":"page"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"equation = \"13H⁺ + NO₃⁻ + CO₃²⁻ + 10e⁻ = 6H₂O@ + HCN@\"\nreac, prod, equal_sign = parse_equation(equation)","category":"page"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"a string containing cement species","category":"page"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"eqC3S = \"C₃S + 5.3H = 1.3CH + C₁.₇SH₄\"\nrC3S = CemReaction(eqC3S)","category":"page"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"an operation on species","category":"page"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"using ChemistryLab\nC3S = CemSpecies(\"C3S\")\nH = CemSpecies(\"H\")\nCH = CemSpecies(\"CH\")\nCSH = CemSpecies(\"C1.7SH4\")\nr = C3S + 5.3H ↔ 1.3CH + CSH\ntypeof(r)","category":"page"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"a balance calculation","category":"page"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"using ChemistryLab\nC3S = CemSpecies(\"C3S\")\nH = CemSpecies(\"H\")\nCH = CemSpecies(\"CH\")\nCSH = CemSpecies(\"C1.7SH4\")\nr = Reaction([C3S, H, CH, CSH]; equal_sign='→')","category":"page"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"a balance calculation with symbolic numbers","category":"page"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"using ChemistryLab\nusing SymPy\nâ, b̂, ĝ = symbols(\"â b̂ ĝ\", real=true)\nCSH = CemSpecies(Dict(:C => â, :S => one(Sym), :H => ĝ))\nC3S = CemSpecies(\"C3S\")\nH = CemSpecies(\"H\")\nCH = CemSpecies(\"CH\")\nr = Reaction([CSH, C3S, H, CH]; equal_sign='→')","category":"page"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"using ChemistryLab\nC3S = CemSpecies(\"C3S\")\nH = CemSpecies(\"H\")\nCH = CemSpecies(\"CH\")\nCSH = CemSpecies(\"C1.7SH4\")\nr = map(simplify, Reaction([C3S, H], [CH, CSH]; equal_sign='→'))\nA, _, _ = stoich_matrix([C3S], [CSH, H, CH]; involve_all_atoms=true) ;","category":"page"},{"location":"man/quickstart/#Quickstart","page":"Quickstart","title":"Quickstart","text":"","category":"section"},{"location":"man/quickstart/","page":"Quickstart","title":"Quickstart","text":"Install ChemistryLab in your chosen environment by entering pkg mode by pressing ] and then:","category":"page"},{"location":"man/quickstart/","page":"Quickstart","title":"Quickstart","text":"pkg> add ChemistryLab","category":"page"},{"location":"man/quickstart/","page":"Quickstart","title":"Quickstart","text":"In order to use ChemistryLab, it is then necessary to load the ChemistryLab.jl package:","category":"page"},{"location":"man/quickstart/","page":"Quickstart","title":"Quickstart","text":"julia> using ChemistryLab","category":"page"},{"location":"example/bogue_calculation/#Bogue-Calculation","page":"Bogue Calculation","title":"Bogue Calculation","text":"","category":"section"},{"location":"example/bogue_calculation/","page":"Bogue Calculation","title":"Bogue Calculation","text":"The way in which species and cementitious species are constructed in ChemistryLab and expressed as a linear combination of reference species opens the door to equilibrium calculations. It also makes it quite natural to retrieve Bogue's formulas and use them simply.","category":"page"},{"location":"example/bogue_calculation/","page":"Bogue Calculation","title":"Bogue Calculation","text":"Bogue's formulas allow us to find the masses of C3S, C2S, C3A and C4AF as a function of the oxides (CaO, SiO2, Al2O3 and Fe2O3) that are regularly found in manufacturers' cement data sheets. However, using the stoich_matrix functions performs a molar decomposition of the species that we wish to decompose as a function of reference species. It is therefore possible to express the anhydrous of the cement as a function of the oxides in a cement data sheet.","category":"page"},{"location":"example/bogue_calculation/","page":"Bogue Calculation","title":"Bogue Calculation","text":"using ChemistryLab #hide\ncemspecies = CemSpecies.(split(\"C3S C2S C3A C4AF\"))\noxides = CemSpecies.(split(\"C S A F\"))\nA, indep_comp = stoich_matrix(cemspecies,oxides)\n\nusing PrettyTables #hide","category":"page"},{"location":"example/bogue_calculation/","page":"Bogue Calculation","title":"Bogue Calculation","text":"Bogue's formulas are thus found by converting species into mass and inverting the matrix.","category":"page"},{"location":"example/bogue_calculation/","page":"Bogue Calculation","title":"Bogue Calculation","text":"# Molar mass of anhdrous phases\nMw = map(x -> x.molar_mass, cemspecies)\n# Molar mass of each oxide\nMwo = map(x -> x.molar_mass, oxides)\nAoa = Mwo .* A .* inv.(Mw)'\n\nprint_stoich_matrix(inv(Aoa), map(x -> x.name, cemspecies), map(x -> x.name, oxides))","category":"page"},{"location":"example/bogue_calculation/","page":"Bogue Calculation","title":"Bogue Calculation","text":"By taking a cement sheet with a classic percentages of oxides (CaO=65.6%; SiO2=21.5%; Al2O3=5.2% and Fe2O3=2.8%), we then obtain the anhydrous masses of the cementitious material. ","category":"page"},{"location":"example/bogue_calculation/","page":"Bogue Calculation","title":"Bogue Calculation","text":"inv(Aoa) *  [65.6, 21.5, 5.2, 2.8]","category":"page"},{"location":"example/bogue_calculation/","page":"Bogue Calculation","title":"Bogue Calculation","text":"","category":"page"},{"location":"example/bogue_calculation/","page":"Bogue Calculation","title":"Bogue Calculation","text":"Another, faster way to do this is to take advantage of the mass=true option of the canonical_stoich_matrix and stoich_matrix functions. This option allows species to be expressed as a linear combination of the reference species in mass rather than in moles.","category":"page"},{"location":"example/bogue_calculation/","page":"Bogue Calculation","title":"Bogue Calculation","text":"A, indep_comp = canonical_stoich_matrix(cemspecies; mass=true)","category":"page"},{"location":"example/bogue_calculation/","page":"Bogue Calculation","title":"Bogue Calculation","text":"Bogue's formulas are then immediate.","category":"page"},{"location":"example/bogue_calculation/","page":"Bogue Calculation","title":"Bogue Calculation","text":"print_stoich_matrix(inv(A), map(x -> x.name, cemspecies), map(x -> x.name, oxides))","category":"page"},{"location":"reference/#Reference","page":"API","title":"Reference","text":"","category":"section"},{"location":"reference/#Contents","page":"API","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"API","title":"API","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"reference/","page":"API","title":"API","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#ChemistryLab.extract_primary_species-Tuple{Any}","page":"API","title":"ChemistryLab.extract_primary_species","text":"extract_primary_species(file_path)\n\nExtract primary species from a Cemdata .dat file, returning a DataFrame.\n\nArguments\n\nfile_path: Path to the Cemdata .dat file.\n\nReturns\n\nDataFrame of primary species.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ChemistryLab.generate_thermo_type-Tuple{Symbol, Vector{Int64}, Vector{DataType}}","page":"API","title":"ChemistryLab.generate_thermo_type","text":"generate_thermo_type(var::Symbol, non_zero_indices::Vector{Int}, with_units::Bool, Tref)\n\nGenerate a unique callable struct type for the thermodynamic property var with given non-zero coefficient indices.\n\nThis function performs dynamic type and method generation at global module level, and caches the generated type for future construction.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ChemistryLab.get_aqueous_species-Tuple{Any}","page":"API","title":"ChemistryLab.get_aqueous_species","text":"get_aqueous_species(json_data)\n\nExtract the set of aqueous species from a ThermoFun JSON data structure.\n\nArguments\n\njson_data: Parsed JSON object containing a \"substances\" field.\n\nReturns\n\nSet{String}: Set of aqueous species symbols.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ChemistryLab.issubscript-Tuple{Char}","page":"API","title":"ChemistryLab.issubscript","text":"Return whether c is a numeric subscript.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ChemistryLab.issuperscript-Tuple{Char}","page":"API","title":"ChemistryLab.issuperscript","text":"Return whether c is a numeric superscript or ⁺/⁻.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ChemistryLab.merge_json-Tuple{Any, Any, Any}","page":"API","title":"ChemistryLab.merge_json","text":"merge_json(json_path, dat_path, output_path)\n\nMerge a Cemdata .dat file into a ThermoFun JSON, preserving field order.\n\nArguments\n\njson_path: Path to the original JSON file.\ndat_path: Path to the Cemdata .dat file.\noutput_path: Path to write the merged JSON.\n\nReturns\n\nNothing. Writes the merged JSON to output_path.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ChemistryLab.merge_reactions-Tuple{Any, Any}","page":"API","title":"ChemistryLab.merge_reactions","text":"merge_reactions(json_data, new_reactions)\n\nMerge new reactions into a ThermoFun JSON structure, skipping duplicates.\n\nArguments\n\njson_data: The parsed JSON object containing a \"reactions\" field.\nnew_reactions: Dictionary of new reactions to add.\n\nReturns\n\nThe updated JSON object with merged reactions.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ChemistryLab.normal_to_sub-Tuple{AbstractString}","page":"API","title":"ChemistryLab.normal_to_sub","text":"Convert all normal characters in s to numeric subscripts .\n\n\n\n\n\n","category":"method"},{"location":"reference/#ChemistryLab.normal_to_super-Tuple{AbstractString}","page":"API","title":"ChemistryLab.normal_to_super","text":"Convert all normal characters or +/- in s to numeric superscripts.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ChemistryLab.parse_float_array-Tuple{Any}","page":"API","title":"ChemistryLab.parse_float_array","text":"parse_float_array(line)\n\nParse a line containing a float array (e.g., -analytical_expression) and return the array of Float64 values.\n\nArguments\n\nline: The line to parse.\n\nReturns\n\nVector{Float64}: Array of parsed float values.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ChemistryLab.parse_phases-Tuple{Any, Any}","page":"API","title":"ChemistryLab.parse_phases","text":"parse_phases(dat_content, aqueous_species)\n\nParse the PHASES section of a Cemdata .dat file, extracting phase info and reactions.\n\nArguments\n\ndat_content: The content of the Cemdata .dat file as a string.\naqueous_species: Set of aqueous species symbols.\n\nReturns\n\nDict{String, Any}: Dictionary of phase names to their data.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ChemistryLab.parse_reaction_stoich_cemdata","page":"API","title":"ChemistryLab.parse_reaction_stoich_cemdata","text":"parse_reaction_stoich_cemdata(reaction_line::AbstractString, aqueous_species, gaseous=false)\n\nParse a Cemdata/Phreeqc reaction line, adding \"@\" for aqueous species as needed.\n\nArguments\n\nreaction_line::AbstractString: The reaction line from a Cemdata .dat file.\naqueous_species: Set of aqueous species symbols.\ngaseous: Boolean indicating if the phase is gaseous.\n\nReturns\n\nreactants: Array of Dicts with \"symbol\" and \"coefficient\" for each reactant/product.\nmodified_equation: The formatted equation string.\ncomment: Any comment found on the line.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ChemistryLab.read_thermofun-Tuple{Any}","page":"API","title":"ChemistryLab.read_thermofun","text":"read_thermofun(filename)\n\nRead a ThermoFun JSON file and return DataFrames for elements, substances, and reactions.\n\nArguments\n\nfilename: Path to the ThermoFun JSON file.\n\nReturns\n\ndf_elements: DataFrame of elements.\ndf_substances: DataFrame of substances.\ndf_reactions: DataFrame of reactions.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ChemistryLab.sub_to_normal-Tuple{AbstractString}","page":"API","title":"ChemistryLab.sub_to_normal","text":"Convert all numeric subscripts in s to normal line.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ChemistryLab.super_to_normal-Tuple{AbstractString}","page":"API","title":"ChemistryLab.super_to_normal","text":"Convert all numeric superscripts or ⁺/⁻ in s to normal line.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ChemistryLab.thermo_function-Tuple{Symbol, AbstractVector{<:Number}}","page":"API","title":"ChemistryLab.thermo_function","text":"thermo_function(var::Symbol, coeffs::AbstractVector{<:Number}; with_units=true, Tref=298.15K, startindex=0)\n\nCreate an instance of callable thermodynamic function for property var with specified coefficients.\n\nThis function calls generate_thermo_type once per unique coefficient pattern, then quickly constructs and returns an instance of the generated type.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ChemistryLab.write_reaction-Tuple{Any, Any}","page":"API","title":"ChemistryLab.write_reaction","text":"write_reaction(f, reaction)\n\nWrite a reaction Dict as JSON to a file (used for custom JSON output).\n\nArguments\n\nf: An open IO stream to write to.\nreaction: The reaction dictionary to write.\n\nReturns\n\nNothing. Writes directly to the file.\n\n\n\n\n\n","category":"method"},{"location":"man/stoichio_matrix/#Stoichiometric-Matrix","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"","category":"section"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"From the definition of species, it is possible to construct a stoichiometric matrix that establishes the relationship between species and chemical elements for species or oxides for cement species. This is called canonical decomposition.","category":"page"},{"location":"man/stoichio_matrix/#Stochiometric-matrix-for-species","page":"Stoichiometric Matrix","title":"Stochiometric matrix for species","text":"","category":"section"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"Any species can be described as a linear combination of chemical elements. A species vector can be expressed as a function of the chemical elements on which they depend. This dependence leads to the creation of a stochiometric matrix.","category":"page"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"using ChemistryLab #hide\nfH2O = 2 * :H + :O\nH2O = Species(fH2O)\nHSO4 = Species(\"HSO₄⁻\")\nCO2 = Species(Dict(:C => 1, :O => 2); symbol=\"CO₂\")\nspecies = [H2O, HSO4, CO2]\ncanonical_stoich_matrix(species) ;\n\nusing PrettyTables #hide","category":"page"},{"location":"man/stoichio_matrix/#Stochiometric-matrix-for-cement-species","page":"Stoichiometric Matrix","title":"Stochiometric matrix for cement species","text":"","category":"section"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"A cement species vector can also be expressed in terms of other species on which they depend. Here, the cement species are expressed in terms of the oxides from which they are composed.","category":"page"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"using ChemistryLab #hide\nC3S = CemSpecies(\"C3S\")\nC2S = CemSpecies(\"C2S\")\nC3A = CemSpecies(\"C3A\")\nC4AF = CemSpecies(Dict(:C=>4, :A=>1, :F=>1); name=\"C4AF\")\ncemspecies = [C3S, C2S, C3A, C4AF]\nA, indep_comp = canonical_stoich_matrix(cemspecies)\n\nusing PrettyTables #hide","category":"page"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"","category":"page"},{"location":"man/stoichio_matrix/#Stochiometric-matrix-for-species-and-primary-species","page":"Stoichiometric Matrix","title":"Stochiometric matrix for species and primary species","text":"","category":"section"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"The decomposition of a set of species can also be done according to a base of primary species.","category":"page"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"using ChemistryLab #hide\nfH2O = 2 * :H + :O\nH2O = Species(fH2O)\nHSO4 = Species(\"HSO₄⁻\")\nCO2 = Species(Dict(:C => 1, :O => 2); symbol=\"CO₂\")\nspecies = [H2O, HSO4, CO2]\nH⁺ = Species(\"H⁺\")\nSO₄²⁻ = Species(\"SO₄²⁻\")\nCO₃²⁻ = Species(\"CO₃²⁻\")\nprimary_species = [H⁺, SO₄²⁻, CO₃²⁻, H2O]\nA, indep_comp, dep_comp = stoich_matrix(species, primary_species)\n\nusing PrettyTables #hide","category":"page"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"note: Display of the stoichiometric matrix\nThe stochiometric matrix can be displayed with different column and row labels. Simply add the keyword 'label', which can take the following values: :name, :symbol, :formulaA, indep_comp, dep_comp = stoich_matrix(species, label=:name)","category":"page"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"Finally, primary species candidates can be found in a database. Those from Cemdata18 can be listed with the following command:","category":"page"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"using ChemistryLab #hide\ndf_elements, df_substances, df_reactions = read_thermofun(\"../../../data/cemdata18-merged.json\") #hide\ndf_primaries = extract_primary_species(\"../../../data/CEMDATA18-31-03-2022-phaseVol.dat\")\ncandidate_primaries = [Species(f; symbol=phreeqc_to_unicode(n)) for (f,n) in zip(df_primaries.formula, df_primaries.symbol)]","category":"page"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"See ChemistryLab.read_thermofun and ChemistryLab.extract_primary_species","category":"page"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"Stoichiometric matrix can then be obtained based on an set of independent primary species.","category":"page"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"using ChemistryLab #hide\ndf_elements, df_substances, df_reactions = read_thermofun(\"../../../data/cemdata18-merged.json\") #hide\ndf_primaries = extract_primary_species(\"../../../data/CEMDATA18-31-03-2022-phaseVol.dat\") #hide\ncandidate_primaries = [Species(f; symbol=phreeqc_to_unicode(n)) for (f,n) in zip(df_primaries.formula, df_primaries.symbol)] #hide\nA, indep_comp, dep_comp = stoich_matrix(species, candidate_primaries)\n\nusing PrettyTables #hide","category":"page"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"","category":"page"},{"location":"example/get_stoichio_matrix/#Stoichiometric-Matrix","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"","category":"section"},{"location":"example/get_stoichio_matrix/#Get-Stoichiometric-Matrix-from-a-list-of-species","page":"Stoichiometric Matrix","title":"Get Stoichiometric Matrix from a list of species","text":"","category":"section"},{"location":"example/get_stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"Let's imagine that we want to form the stochiometric matrix of a list of solid and water species. For that, we need to read the database from which these species originate and retrieve the list of primary species from that database.","category":"page"},{"location":"example/get_stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"using ChemistryLab\nusing PrettyTables\ndf_elements, df_substances, df_reactions = read_thermofun(\"../../../data/cemdata18-merged.json\")\ndf_primaries = extract_primary_species(\"../../../data/CEMDATA18-31-03-2022-phaseVol.dat\")","category":"page"},{"location":"example/get_stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"See ChemistryLab.read_thermofun and ChemistryLab.extract_primary_species","category":"page"},{"location":"example/get_stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"It is then necessary to identify the list of secondary species likely to appear during the reactions.","category":"page"},{"location":"example/get_stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"given_species = filter(row -> row.symbol ∈ split(\"C3S Portlandite Jennite H2O@\"), df_substances)\nsecondaries = filter(row->row.aggregate_state == \"AS_AQUEOUS\" \n                          && all(k->first(k) ∈ union_atoms(atoms.(given_species.species)), atoms(row.species))\n                          && row.symbol ∉ split(\"H2@ O2@\"),\n                          df_substances)","category":"page"},{"location":"example/get_stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"We can then deduce the primary species concerned by the reaction.","category":"page"},{"location":"example/get_stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"all_species = unique(vcat(given_species, secondaries), :symbol)\nspecies = [Species(f; symbol = phreeqc_to_unicode(n)) for (f, n) in zip(all_species.formula, all_species.symbol)]\ncandidate_primaries = [Species(f; symbol = phreeqc_to_unicode(n)) for (f, n) in zip(df_primaries.formula, df_primaries.symbol)]","category":"page"},{"location":"example/get_stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"And construct the stoichiometric matrix","category":"page"},{"location":"example/get_stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"A, indep_comp, dep_comp = stoich_matrix(species, candidate_primaries)\n\nusing PrettyTables #hide","category":"page"},{"location":"example/get_stoichio_matrix/#Get-Stoichiometric-Matrix-from-a-database-file","page":"Stoichiometric Matrix","title":"Get Stoichiometric Matrix from a database file","text":"","category":"section"},{"location":"example/get_stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"using ChemistryLab\nusing PrettyTables\ndf_elements, df_substances, df_reactions = read_thermofun(\"../../../data/cemdata18-merged.json\")\ndf_primaries = extract_primary_species(\"../../../data/CEMDATA18-31-03-2022-phaseVol.dat\")\naqueous_species = filter(row->row.aggregate_state == \"AS_AQUEOUS\", df_substances)\nspecies = [Species(f; symbol=phreeqc_to_unicode(n)) for (f,n) in zip(aqueous_species.formula, aqueous_species.symbol)]\ncandidate_primaries = [Species(f; symbol=phreeqc_to_unicode(n)) for (f,n) in zip(df_primaries.formula, df_primaries.symbol)]\nA, indep_comp, dep_comp = stoich_matrix(species, candidate_primaries) ;\n\nusing PrettyTables #hide","category":"page"},{"location":"example/get_stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"All the reactions of the species contained in the database can thus be reconstructed. Here, only ionic species are listed given the choice to only read ionic species in the database (\"AS_AQUEOUS\").","category":"page"},{"location":"example/get_stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"stoich_matrix_to_reactions(A, indep_comp, dep_comp) ;","category":"page"},{"location":"example/get_stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"","category":"page"},{"location":"example/get_stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"The exercise can also be done on solid species. In this case, the data filter is carried out using the keyword \"AS_CRYSTAL\", in accordance with the terminology adopted in Thermofun.","category":"page"},{"location":"example/get_stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"A, indep_comp, dep_comp = stoich_matrix(species, candidate_primaries) ; #hide\n\nusing PrettyTables #hide","category":"page"},{"location":"example/get_stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"stoich_matrix_to_reactions(A, indep_comp, dep_comp) ; #hide","category":"page"},{"location":"example/get_stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"","category":"page"},{"location":"example/get_stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"Or with gases (\"AS_GAS\")","category":"page"},{"location":"example/get_stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"A, indep_comp, dep_comp = stoich_matrix(species, candidate_primaries) ; #hide\n\nusing PrettyTables #hide","category":"page"},{"location":"example/get_stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"stoich_matrix_to_reactions(A, indep_comp, dep_comp) ; #hide","category":"page"},{"location":"man/databases/#Database-Interoperability","page":"Database Interoperability","title":"Database Interoperability","text":"","category":"section"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"So far, we have looked at the possibility of creating and manipulating any species, whether they exist or not. Creating an H₂O⁺⁴ molecule, for example, is not a problem.","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"HSO4 = Species(\"H₂O⁴⁺\")","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"However, you will admit that it is a little strange...","category":"page"},{"location":"man/databases/#Cemdata18-and-PSI-Nagra-12-07-Databases","page":"Database Interoperability","title":"Cemdata18 and PSI-Nagra-12-07 Databases","text":"","category":"section"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"This is why Cement Chemistry relies on existing databases, in particular Cemdata18 and PSI-Nagra-12-07. Cemdata18 is a chemical thermodynamic database for hydrated Portland cements and alkali-activated materials. PSI-Nagra is a Chemical Thermodynamic Database. The formalism adopted for these databases is that of Thermofun which is a universal open-source client that delivers thermodynamic properties of substances and reactions at the temperature and pressure of interest. The information is stored in json files.","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"With ChemistryLab, you can parse a ThermoFun-like json file and return DataFrames for:","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"elements:","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"df_elements, df_substances, df_reactions = read_thermofun(\"../../../data/cemdata18-merged.json\")\nshow(df_elements, allcols=true, allrows=true)","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"ChemistryLab.read_thermofun","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"species (aqueous, solid or gaseous phases):","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"show(df_substances, allcols=true, allrows=false)","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"reactions contained in the database","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"show(df_reactions, allcols=true, allrows=false)","category":"page"},{"location":"man/databases/#Primary-species-extraction","page":"Database Interoperability","title":"Primary species extraction","text":"","category":"section"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"It is also possible to retrieve primary species from the Cemdata18 database, primary species being the designation of a subset of species for which any species can be represented as the linear combination of primary species.","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"df_primaries = extract_primary_species(\"../../../data/CEMDATA18-31-03-2022-phaseVol.dat\")\nshow(df_primaries, allcols=true, allrows=true)","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"ChemistryLab.extract_primary_species","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"","category":"page"},{"location":"#ChemistryLab","page":"Home","title":"ChemistryLab","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ChemistryLab.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Computational chemistry tool for low-carbon cementitious materials","category":"page"},{"location":"#Install","page":"Home","title":"Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/jfbarthelemy/ChemistryLab.jl","category":"page"},{"location":"#Quickstart","page":"Home","title":"Quickstart","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install ChemistryLab in your chosen environment by entering pkg mode by pressing ] and then:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add ChemistryLab","category":"page"},{"location":"","page":"Home","title":"Home","text":"In order to use ChemistryLab, it is then necessary to load the ChemistryLab.jl package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using ChemistryLab","category":"page"},{"location":"man/formula_manipulation/#Chemical-Formula-Manipulation","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"","category":"section"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"ChemistryLab allows you to create and manipulate chemical formulas. It is based on Formula which is a structure (struct) which contains an expression, a writing of the formula close to those found in the Phreeqc databases, a unicode expression as well as a composition in the form of dictionaries and a charge.","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"struct Formula{T<:Number}\n    expr::String\n    phreeqc::String\n    unicode::String\n    colored::String\n    composition::OrderedDict{Symbol,T}\n    charge::Int8\nend","category":"page"},{"location":"man/formula_manipulation/#Formula-construction","page":"Chemical Formula Manipulation","title":"Formula construction","text":"","category":"section"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"Formulas can be constructed:","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"by parsing a string containing eventually fractional or decimal coefficients","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"using ChemistryLab #hide\nfgen = Formula(\"C3AFS5//8H4.32\")","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"from symbols representing atoms ","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"using ChemistryLab #hide\nfCO2 = :C + 2 * :O","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"Charges can also be included during the creation in two different ways:","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"fHSO₄⁻ = :H+:S+4*:O+:e","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"Or:","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"fNa⁺ = :Na+:Zz","category":"page"},{"location":"man/formula_manipulation/#Type-of-Formula","page":"Chemical Formula Manipulation","title":"Type of Formula","text":"","category":"section"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"The type of the Formula struct being associated with the most complex type of the set of coefficients.","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"typeof(Formula(\"H2O\"))","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"typeof(Formula(\"C3AFS5//8H4.32\"))","category":"page"},{"location":"man/formula_manipulation/#Change-of-type","page":"Chemical Formula Manipulation","title":"Change of type","text":"","category":"section"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"Coefficient types can be converted a posteriori.","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"convert(Float64, Formula(\"H2O\"))","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"","category":"page"},{"location":"tutorial/","page":"-","title":"-","text":"This tutorial progressively introduces the main features of ChemistryLab using practical examples.","category":"page"},{"location":"tutorial/","page":"-","title":"-","text":"","category":"page"}]
}
